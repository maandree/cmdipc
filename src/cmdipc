#!/usr/bin/env python3
# -*- python -*-
copyright='''
cmdipc — System V and POSIX IPC from the command line
Copyright © 2014  Mattias Andrée (maandree@member.fsf.org)

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
'''

import sys

from argparser import ArgParser
import sysv_ipc
import posix_ipc


parser = ArgParser('System V and POSIX IPC from the command line',
                   '\n'.join(['%s -Q [<options>]'                     % sys.argv[0],
                              '%s -Q [<options>] send [--] <message>' % sys.argv[0],
                              '%s -Q [<options>] receive'             % sys.argv[0],
                              '%s -S [<options>] [p|v|z]'             % sys.argv[0],
                              '%s -S [<options>] read'                % sys.argv[0],
                              '%s -M [<options>]'                     % sys.argv[0],
                              '%s -M [<options>] write -- <data>'     % sys.argv[0],
                              '%s -M [<options>] read'                % sys.argv[0],
                              '%s -X [<options>]'                     % sys.argv[0],
                              '%s -X [<options>] enter'               % sys.argv[0],
                              '%s -X [<options>] leave'               % sys.argv[0],
                              '%s -C [<options>]'                     % sys.argv[0],
                              '%s -C [<options>] enter'               % sys.argv[0],
                              '%s -C [<options>] leave'               % sys.argv[0],
                              '%s -C [<options>] wait'                % sys.argv[0],
                              '%s -C [<options>] notify [all]'        % sys.argv[0],
                              '%s -C [<options>] broadcast'           % sys.argv[0]]),
                   None, None, True, ArgParser.standard_abbreviations())


parser.add_argumentless(['-h', '-?', '--help'],  0,          'Prints this help message and exits')
#parser.add_argumentless(['-p', '--posix'],       0,          'Use POSIX IPC rather than System V IPC')
parser.add_argumented  (['-k', '--key'],         0, 'KEY',   'The key (SysV) or name (POSIX) of the item')
parser.add_argumented  (['-m', '--mode'],        0, 'OCTAL', 'The mode for the item')
parser.add_argumented  (['-s', '--size'],        0, 'SIZE',  'Maximum size for messages')
parser.add_argumented  (['-t', '--type'],        0, 'TYPE',  'Message type')
parser.add_argumented  (['-d', '--delta'],       0, 'DELTA', 'Semaphore value increment')
parser.add_argumented  (['-i', '--initial'],     0, 'VALUE', 'Initial semaphore value')
parser.add_argumented  (['-b', '--timeout'],     0, 'SECS',  'Semaphore V/Z timeout, in seconds')
parser.add_argumented  (['-l', '--length'],      0, 'LEN',   'Shared memory read length')
parser.add_argumented  (['-o', '--offset'],      0, 'OFF',   'Shared memory read/write offset')
parser.add_argumentless(['-r', '--remove'],      0,          'Remove unit')
parser.add_argumentless(['-n', '--nonblocking'], 0,          'Do not block, exit with 2 if busy')
parser.add_argumentless(['-c', '--create'],      0,          'Create item')
parser.add_argumentless(['-x', '--exclusive'],   0,          'Create exclusive item')
parser.add_argumentless(['-Q', '--mqueue'],      0,          'Use message queue')
parser.add_argumentless(['-S', '--semaphore'],   0,          'Use semaphore')
parser.add_argumentless(['-M', '--shm'],         0,          'Use shared memory')
parser.add_argumentless(['-X', '--mutex'],       0,          'Use mutex (using semaphore)')
parser.add_argumentless(['-C', '--condition'],   0,          'Use condition (non-primitive)')
#parser.add_argumentless(['-B', '--barrier'],     0,          'Use barrier (non-primitive)')
#parser.add_argumentless(['-R', '--rendezvous'],  0,          'Use rendezvous (non-primitive)')
#parser.add_argumentless(['-L', '--shared-lock'], 0,          'Use shared lock (non-primitive)')


parser.parse()
parser.support_alternatives()

if parser.opts['--help'] is not None:
    parser.help()
    sys.exit(0)


try:
    if parser.opts['--mqueue'] is not None:
        key, flags, mode, size, type = None, 0, 0o600, 2048, None
        block = parser.opts['--nonblocking'] is None
        if parser.opts['--key']       is not None:  key   = int(parser.opts['--key'][0])
        if parser.opts['--create']    is not None:  flags = sysv_ipc.IPC_CREAT
        if parser.opts['--exclusive'] is not None:  flags = sysv_ipc.IPC_CREAT | sysv_ipc.IPC_EXCL
        if parser.opts['--mode']      is not None:  mode  = int(parser.opts['--mode'][0], 8)
        if parser.opts['--size']      is not None:  size  = int(parser.opts['--size'][0])
        if parser.opts['--type']      is not None:  type  = int(parser.opts['--type'][0])
        q = sysv_ipc.MessageQueue(key, flags, mode, size)
        if key is None:
            print('key: %i' % q.key)
        nocmd = False
        if (len(parser.files) > 1) and (parser.files[0] == 'send'):
            if type is None:
                type = 1
            q.send(' '.join(parser.files[1:]).encode('utf-8'), block, type)
        elif (len(parser.files) == 1) and (parser.files[0] == 'receive'):
            if type is None:
                type = 0
            (message, type) = q.receive(block, type)
            print('type: %i' % type)
            print('length: %i' % len(message))
            sys.stdout.buffer.write(message)
            sys.stdout.buffer.write(b'\n')
            sys.stdout.buffer.flush()
        elif key is not None:
            nocmd = True
        if parser.opts['--remove'] is not None:
            q.remove()
        elif nocmd:
            print('Invalid command given', file = sys.stderr)
            sys.exit(1)
    
    elif parser.opts['--semaphore'] is not None:
        key, flags, mode, initial, timeout, delta = None, 0, 0o600, 0, None, 1
        if parser.opts['--nonblocking'] is not None:  timeout = 0
        if parser.opts['--key']         is not None:  key     = int(parser.opts['--key'][0])
        if parser.opts['--create']      is not None:  flags   = sysv_ipc.IPC_CREAT
        if parser.opts['--exclusive']   is not None:  flags   = sysv_ipc.IPC_CREAT | sysv_ipc.IPC_EXCL
        if parser.opts['--mode']        is not None:  mode    = int(parser.opts['--mode'][0], 8)
        if parser.opts['--initial']     is not None:  initial = int(parser.opts['--initial'][0])
        if parser.opts['--timeout']     is not None:  timeout = float(parser.opts['--timeout'][0])
        if parser.opts['--delta']       is not None:  delta   = int(parser.opts['--delta'][0])
        s = sysv_ipc.Semaphore(key, flags, mode, initial)
        if key is None:
            print('key: %i' % s.key)
        nocmd = False
        if   (len(parser.files) == 1) and (parser.files[0] == 'p'):  s.P(timeout, delta)
        elif (len(parser.files) == 1) and (parser.files[0] == 'v'):  s.V(delta)
        elif (len(parser.files) == 1) and (parser.files[0] == 'z'):  s.Z(timeout)
        elif (len(parser.files) == 1) and (parser.files[0] == 'read'):
            print('%i' % s.value)
        elif key is not None:
            nocmd = True
        if parser.opts['--remove'] is not None:
            s.remove()
        elif nocmd:
            print('Invalid command given', file = sys.stderr)
            sys.exit(1)
    
    elif parser.opts['--shm'] is not None:
        key, flags, mode, size, length, offset = None, 0, 0o600, None, 0, 0
        if parser.opts['--key']       is not None:  key    = int(parser.opts['--key'][0])
        if parser.opts['--create']    is not None:  flags  = sysv_ipc.IPC_CREAT
        if parser.opts['--exclusive'] is not None:  flags  = sysv_ipc.IPC_CREAT | sysv_ipc.IPC_EXCL
        if parser.opts['--mode']      is not None:  mode   = int(parser.opts['--mode'][0], 8)
        if parser.opts['--size']      is not None:  size   = int(parser.opts['--size'][0])
        if parser.opts['--length']    is not None:  length = int(parser.opts['--length'][0])
        if parser.opts['--offset']    is not None:  offset = int(parser.opts['--offset'][0])
        if size is None:
            m = sysv_ipc.SharedMemory(key, flags, mode)
        else:
            m = sysv_ipc.SharedMemory(key, flags, mode, size)
        if key is None:
            print('key: %i' % m.key)
        nocmd = False
        if (len(parser.files) > 1) and (parser.files[0] == 'write'):
            m.write(' '.join(parser.files[1:]).encode('utf-8'), offset)
        elif (len(parser.files) == 1) and (parser.files[0] == 'read'):
            sys.stdout.buffer.write(m.read(length, offset))
            sys.stdout.buffer.write(b'\n')
            sys.stdout.buffer.flush()
        elif key is not None:
            nocmd = True
        if parser.opts['--remove'] is not None:
            m.remove()
        elif nocmd:
            print('Invalid command given', file = sys.stderr)
            sys.exit(1)
    
    elif parser.opts['--mutex'] is not None:
        key, flags, mode, timeout = None, 0, 0o600, None
        if parser.opts['--nonblocking'] is not None:  timeout = 0
        if parser.opts['--key']         is not None:  key     = int(parser.opts['--key'][0])
        if parser.opts['--create']      is not None:  flags   = sysv_ipc.IPC_CREAT
        if parser.opts['--exclusive']   is not None:  flags   = sysv_ipc.IPC_CREAT | sysv_ipc.IPC_EXCL
        if parser.opts['--mode']        is not None:  mode    = int(parser.opts['--mode'][0], 8)
        if parser.opts['--timeout']     is not None:  timeout = float(parser.opts['--timeout'][0])
        s = sysv_ipc.Semaphore(key, flags, mode, 1)
        if key is None:
            print('key: %i' % s.key)
        nocmd = False
        if   (len(parser.files) == 1) and (parser.files[0] == 'enter'):  s.P(timeout)
        elif (len(parser.files) == 1) and (parser.files[0] == 'leave'):  s.V()
        elif key is not None:
            nocmd = True
        if parser.opts['--remove'] is not None:
            s.remove()
        elif nocmd:
            print('Invalid command given', file = sys.stderr)
            sys.exit(1)
    
    elif parser.opts['--condition'] is not None:
        key, flags, mode, timeout = [None, None, None], 0, 0o600, None
        if parser.opts['--nonblocking'] is not None:  timeout = 0
        if parser.opts['--key']         is not None:  key     = parser.opts['--key'][0]
        if parser.opts['--create']      is not None:  flags   = sysv_ipc.IPC_CREAT
        if parser.opts['--exclusive']   is not None:  flags   = sysv_ipc.IPC_CREAT | sysv_ipc.IPC_EXCL
        if parser.opts['--mode']        is not None:  mode    = int(parser.opts['--mode'][0], 8)
        if parser.opts['--timeout']     is not None:  timeout = float(parser.opts['--timeout'][0])
        if key[0] is not None:
            key = [int(k) for k in key.split('.')]
        s = sysv_ipc.Semaphore(key[0], flags, mode, 1)
        c = sysv_ipc.Semaphore(key[1], flags, mode, 0)
        q = sysv_ipc.MessageQueue(key[2], flags, mode, 1)
        if key[0] is None:
            print('key: %i.%i.%i' % (s.key, c.key, q.key))
        nocmd = False
        if len(parser.files) == 1:
            if   parser.files[0] == 'enter':      s.P(timeout)
            elif parser.files[0] == 'leave':      s.V()
            elif parser.files[0] == 'wait':       c.V() ; s.V() ; q.receive() ; s.P(timeout) ; c.P()
            elif parser.files[0] == 'notify':     q.send('N')
            elif parser.files[0] == 'broadcast':
                for _ in range(c.value):
                    q.send('N')
            elif key[0] is not None:
                nocmd = True
        elif (len(parser.files) == 2) and (parser.files[0] == 'notify') and (parser.files[1] == 'all'):
            for _ in range(min(c.value, 1)):
                q.send('N')
        elif key[0] is not None:
            nocmd = True
        if parser.opts['--remove'] is not None:
            s.remove()
            c.remove()
            q.remove()
        elif nocmd:
            print('Invalid command given', file = sys.stderr)
            sys.exit(1)
    
    else:
        print('No command given', file = sys.stderr)
        sys.exit(1)

except posix_ipc.SignalError:       sys.exit(5)
except  sysv_ipc.PermissionsError:  sys.exit(4)
except posix_ipc.PermissionsError:  sys.exit(4)
except  sysv_ipc.ExistentialError:  sys.exit(3)
except posix_ipc.ExistentialError:  sys.exit(3)
except  sysv_ipc.BusyError:         sys.exit(2)
except posix_ipc.BusyError:         sys.exit(2)
except:                             sys.exit(1)

